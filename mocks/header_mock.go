// Code generated by MockGen. DO NOT EDIT.
// Source: header.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	sarama "github.com/IBM/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockheaderOperation is a mock of headerOperation interface.
type MockheaderOperation struct {
	ctrl     *gomock.Controller
	recorder *MockheaderOperationMockRecorder
}

// MockheaderOperationMockRecorder is the mock recorder for MockheaderOperation.
type MockheaderOperationMockRecorder struct {
	mock *MockheaderOperation
}

// NewMockheaderOperation creates a new mock instance.
func NewMockheaderOperation(ctrl *gomock.Controller) *MockheaderOperation {
	mock := &MockheaderOperation{ctrl: ctrl}
	mock.recorder = &MockheaderOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockheaderOperation) EXPECT() *MockheaderOperationMockRecorder {
	return m.recorder
}

// AddIntoHeader mocks base method.
func (m *MockheaderOperation) AddIntoHeader(headers []sarama.RecordHeader, key, value string) []sarama.RecordHeader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIntoHeader", headers, key, value)
	ret0, _ := ret[0].([]sarama.RecordHeader)
	return ret0
}

// AddIntoHeader indicates an expected call of AddIntoHeader.
func (mr *MockheaderOperationMockRecorder) AddIntoHeader(headers, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIntoHeader", reflect.TypeOf((*MockheaderOperation)(nil).AddIntoHeader), headers, key, value)
}

// ExtractHeader mocks base method.
func (m *MockheaderOperation) ExtractHeader(message *sarama.ConsumerMessage) []sarama.RecordHeader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractHeader", message)
	ret0, _ := ret[0].([]sarama.RecordHeader)
	return ret0
}

// ExtractHeader indicates an expected call of ExtractHeader.
func (mr *MockheaderOperationMockRecorder) ExtractHeader(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractHeader", reflect.TypeOf((*MockheaderOperation)(nil).ExtractHeader), message)
}
